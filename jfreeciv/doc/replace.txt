\bbool\b, bool
\bFALSE\b, false
\bTRUE\b, true
\bNULL\b, null
\bchar\s+\*\b, String 
\(void\), ()
const char *, final String 
final String\s+([\w_]+)\,\s+\.\.\.,	Object ... $1





-----------------------------------
in a c enum
add 
	private final int index;
	Erfc_status(int index) {
		this.index = index;
	}
	public int getIndex() {
		return index;
	}
  
replace all enum constant with fullname
replace:
\=\s*([\-0-9\.]+)  ,	($1)
------------------------------
enum rfc_status, Erfc_status
_\(\"([^"]+)\"\), "$1"
strlen\(([a-zA-Z0-9._]+)\), $1.length()
struct\s+([a-zA-Z\_0-9]+)\s+unit *, $1 
->, .
\#define\s+([a-zA-Z0-9\_]+)\s+([0-9a-zA-Z\_\.]+), public static final int $1 = $2;
unit_list_iterate_safe\(([a-zA-Z\_0-9\.]+)\,\s+([a-zA-Z\_0-9]+)\)\s+\{
    for (unit $2 : $1.data) {
} unit_list_iterate_safe_end;
    }
city_list_iterate\(([a-zA-Z\_0-9\.]+)\,\s+([a-zA-Z\_0-9]+)\)\s+\{
    for (city $2 : $1.data) {
city_list_iterate_end\s*;
    }
([a-z]+)_list_iterate\(([a-zA-Z\_0-9\.]+)\,\s+([a-zA-Z\_0-9]+)\)\s+\{
    for ($1 $3 : $2.data) {
([a-z]+)_list_iterate_end\s*;
    }
struct ([a-z]+)_list,  Speclists<$1>
([a-zA-Z0-9]+)_list_size\(([a-zA-Z0-9\_\.]+)\)                  unit_list_size(targets)
    $2.foo_list_size()
square_iterate(punit.tile, range, ptile) {
    square_dxy_iterate(center_tile, radius, tile_itr, _dummy_x, dummy_y)
    iterate_outward_dxy(center_tile, radius, tile_itr, dx_itr, dy_itr)
square_iterate_end
    square_dxy_iterate_end
([a-zA-Z\_0-9]+)\s*\=\s*([\d]+)\,?
    public static int $1 = $2;
    